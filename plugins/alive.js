// created by inrl
var NewGen, templateButtons;
const os = require("os");
const got = require('got')
const speed = require("performance-now");
const  { inrl , tiny, config, inrlQuita, insult , getBuffer, randomStyle, styletext, send_alive, send_menu }= require('../lib/')
const Config = require("../config");
inrl(
	   {
		pattern: ['list'],
		desc: 'To viwe list of categories',
                sucReact: "üíØ",
                category: ["system", "all"],
	   },
	async (message, client, match) => {
if(match) return;
const categories = ["search", "all", "downloade", "chat", "system", 'fun', '18+', 'apk','ff','owner', 'create', 'group', "logo","photo","sticker","anime" ];
let rows =[];
function _0x413f(_0x3c88e5,_0xf3aad1){var _0x45dcbe=_0x554a();return _0x413f=function(_0x2e70a3,_0x235d1c){_0x2e70a3=_0x2e70a3-(0x1*-0x2309+-0x14b1*0x1+0x1*0x3841);var _0x535110=_0x45dcbe[_0x2e70a3];return _0x535110;},_0x413f(_0x3c88e5,_0xf3aad1);}function _0x2d3dcb(_0x5f107a,_0x2bf435,_0x526e26,_0x295c24,_0x230099){return _0x413f(_0x2bf435- -0x384,_0x526e26);}(function(_0x553b7a,_0x16c9f1){function _0x5eea3d(_0x490ff8,_0xd02797,_0x3e10d1,_0x2ea969,_0x373441){return _0x413f(_0x373441- -0x13,_0x3e10d1);}var _0x44ce39=_0x553b7a();function _0x39011(_0x5263da,_0x41fb49,_0x2c9e04,_0x2a8fae,_0x1f2ecf){return _0x413f(_0x2a8fae- -0xb,_0x5263da);}function _0x9978a7(_0x5e5a4b,_0x78ec47,_0x3d7198,_0x53a84c,_0x491086){return _0x413f(_0x3d7198- -0x172,_0x5e5a4b);}function _0x41c3db(_0x262236,_0x367d27,_0x183f2b,_0x1a5287,_0x4f3acc){return _0x413f(_0x1a5287-0x224,_0x4f3acc);}function _0x2a9b61(_0x2fa5df,_0x33aa99,_0x53b292,_0x1d0ad8,_0x4a54f8){return _0x413f(_0x4a54f8-0x171,_0x2fa5df);}while(!![]){try{var _0x3eaa09=-parseInt(_0x39011(0x7c,0x77,0x81,0x7d,0x79))/(-0x21ff+0x2259+0x1*-0x59)*(parseInt(_0x9978a7(-0xe9,-0xea,-0xeb,-0xec,-0xe6))/(-0x17cb+-0x1*0x17cf+0x2f9c))+-parseInt(_0x5eea3d(0x7a,0x74,0x6f,0x77,0x76))/(-0x1*-0x1c+-0x1ed7+0x1ebe)+-parseInt(_0x5eea3d(0x7d,0x7a,0x78,0x7b,0x7e))/(0x9*-0x149+0x1f67*0x1+-0x13d2)+-parseInt(_0x41c3db(0x2b0,0x2b4,0x2b1,0x2b7,0x2b2))/(-0xc*0x311+-0xebd+0x19c7*0x2)*(-parseInt(_0x9978a7(-0xe3,-0xec,-0xe6,-0xe3,-0xe0))/(0x1*0x1a69+0x829+0xb*-0x324))+parseInt(_0x5eea3d(0x7c,0x83,0x78,0x77,0x7d))/(-0x1*0x153f+0xdb3+-0x7*-0x115)+-parseInt(_0x41c3db(0x2ab,0x2ac,0x2ac,0x2b2,0x2b9))/(0x1070+-0x56c+-0x26*0x4a)*(-parseInt(_0x2a9b61(0x1f9,0x200,0x1f5,0x1f6,0x1fb))/(-0x2147*-0x1+-0x9cc+0xbb9*-0x2))+-parseInt(_0x41c3db(0x2ba,0x2b3,0x2b0,0x2b3,0x2b3))/(0x1c62+-0x6aa*-0x3+-0x3056)*(-parseInt(_0x2a9b61(0x1f8,0x1fa,0x200,0x1f8,0x1fc))/(0x362*0x4+0x1c1*0xd+0x3a1*-0xa));if(_0x3eaa09===_0x16c9f1)break;else _0x44ce39['push'](_0x44ce39['shift']());}catch(_0x1c2a0b){_0x44ce39['push'](_0x44ce39['shift']());}}}(_0x554a,0xf84d*0x2+0x201*0x18d+0x9239));function _0x554a(){var _0x53d285=['3337425WjtjQd','71556rWpPAt','lengt','382050FBxRij','-menu','740YazcuE','511YAKcgb','1633470SyZTPv','55683ldpQmA','4059DSHvwq','24szajER','push','344uQBYeA','1930ccUEaA'];_0x554a=function(){return _0x53d285;};return _0x554a();}function _0x46ef7(_0xdba763,_0x4d3cbd,_0x12fac4,_0x394248,_0x51a7b2){return _0x413f(_0x51a7b2-0x297,_0x394248);}function _0x589023(_0x1414d2,_0x8b3407,_0xc03c52,_0x3b90a0,_0x5e9b01){return _0x413f(_0x1414d2-0xce,_0x5e9b01);}for(i=-0x3e2+-0x1*-0xe0d+-0xa2b;i<categories[_0x2d3dcb(-0x2ec,-0x2f2,-0x2ee,-0x2ee,-0x2f2)+'h'];i++){if([i])rows[_0x46ef7(0x31e,0x31e,0x324,0x321,0x324)]({'title':''+categories[i],'rowId':categories[i]+_0x2d3dcb(-0x2f4,-0x2f0,-0x2ec,-0x2f5,-0x2f1)});}
const sections = [{title: `${Config.BOT_INFO.split(',')[0]} list menu`, rows: rows}]
const button = {
        text: `select an categorie from here`,
        footer: Config.FOOTER,
        buttonText: "click here to viwe categories",
        sections,
}
await client.sendMessage( message.from, button, { quoted: message});
});
inrl(
	   {
		pattern: ['ping'],
		desc: 'To check ping',
                sucReact: "üíØ",
                category: ["system", "all"],
	   },
	async (message, client) => {
             try {
		const start = new Date().getTime()
	        client.sendMessage( message.from, { text: '*‚ùÆ ·¥õ·¥ás·¥õ…™…¥…¢ ·¥ò…™…¥…¢ ‚ùØ*' }, { quoted: message })
		const end = new Date().getTime()
		await client.sendMessage( message.from, { text: '* Ä·¥ás·¥ò·¥è…¥s·¥á …™…¥ ' + (end - start) + ' _·¥çs_*' }, { quoted: message })
		global.catchError = false;
                } catch (error) {
      global.catchError = true;
      return await client.sendErrorMessage( message.from, error, message.key, message );
                }
	 }
);
inrl({ pattern: ['del'], desc: "to delete unwanted grp msg sended by bot",sucReact: "‚öíÔ∏è",  category: ["all"]}, async (message, client) => {
if (message.client.isCreator && message.isGroup) {
                if (!message.quoted) return await client.sendMessage(message.from, { text :"replay to a group content"},{ quoted: message })
                let { chat, fromMe, id } = message.quoted
                client.sendMessage(message.from, { delete: { remoteJid: message.chat, fromMe: message.quoted.fromMe, id: message.quoted.id, participant: message.quoted.sender }})
        }
    }
);
inrl(
	   {
		pattern: ['dlt'],
		desc: 'To dlt unwanted msg by admin from group content',
                sucReact: "ü§å",
                category: ["system", "all"],
	   },
	async (message, client) => {
        const groupMetadata = message.isGroup ? await client.groupMetadata(message.from).catch(e => {}) : ''
	const participants = message.isGroup ? await groupMetadata.participants : ''
        let admins = message.isGroup ? await participants.filter(v => v.admin !== null).map(v => v.id) : ''
if(admins.includes(message.sender) && message.isGroup) {
await client.sendMessage(message.from, {
		delete: {
			remoteJid: message.from,
			fromMe: message.quoted.fromMe,
			id: message.quoted.id,
			participant: message.quoted.sender
            }
     })
}
})
inrl(
  {
    pattern: ["alive"],
    desc: "to check the bot status",
    sucReact: "ü•∞",
    category: ["system", "all"],
  },
  async (message, client) => {
await send_alive(message, client)
});
inrl(
  {
    pattern: ["script"],
    desc: "to get the bot script",
    sucReact: "ü•µ",
    category: ["system", "all"],
  },
  async (message, client) => {
      const response = await got("https://api.github.com/repos/inrl-official/inrl-bot-md")
      const json = JSON.parse(response.body);
      let captIon = `‚ï≠‚ïê‚ïê‚ïê„Äò${Config.BOT_INFO.split(",")[0]}„Äô‚ïê‚ïê‚ïê‚ä∑‚ùç
‚îÉ‚òØÔ∏é‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÉ‚òØÔ∏é‚îÇ
‚îÉ‚òØÔ∏é‚îÇ ·¥úÍú±·¥á Ä : _${message.client.pushName}_
‚îÉ‚òØÔ∏é‚îÇ ·¥†·¥á ÄÍú±…™·¥è…¥ : ${tiny(Config.VERSION)}
‚îÉ‚òØÔ∏é‚îÇ …¢…™·¥õ ú·¥ú ô : _${Config.GIT}_
‚îÉ‚òØÔ∏é‚îÇ ·¥õ·¥ú Ä·¥õ·¥è Ä…™·¥Ä ü : _${Config.VIDEO}_
‚îÉ‚òØÔ∏é‚îÇ ·¥õ·¥è·¥õ·¥á ü Íú±·¥õ·¥Ä Ä·¥áÍú± :* ${json.stargazers_count} stars
‚îÉ‚òØÔ∏é‚îÇ Íú∞·¥è Ä·¥ãÍú±:* ${json.forks_count} forks
‚îÉ‚òØÔ∏é‚îÇ
‚îÉ‚òØÔ∏é‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ä∑`
 
let buttonMessage = {
            image: { url: json.owner.avatar_url },
            caption: captIon,
            footer: Config.FOOTER,
            headerType: 1,
            contextInfo: {
                externalAdReply: {
                    title: json.name,
                    body: json.description ,
                    thumbnail: await getBuffer(Config.BOT_INFO.split(',')[2]),
                    mediaType: 2,
                    mediaUrl: Config.INSTAGRAM,
                    sourceUrl: Config.GIT,
                },
            },
        };
    await client.sendMessage(message.from, buttonMessage, { quoted: message });
});
const bots = require("../lib/perfix");
const Lang = bots.getString("_whats");
// const fs = require("fs");
// const path = require("path");
let cTitle = { "search": "Search",  "all": 'All', "downloade": "Downloade", "chat": "Chat","inrl":"Inrl","ibot":"Ibot", "system": "System", 'fun': "Fun", '18+': "18+","ff:":"Ff", 'owner': "Owner", 'create': "Create", 'group': "Group", "logo": "Logo","photo": "Photo","sticker": "Sticker","anime": "Anime" }

inrl({ pattern: ["menu"], desc: Lang.DESCC, sucReact: "üì∞", category: ["all", "system"] }, async (message, client) => {
 await send_menu(message, client);
});
bots.categories.map(category => {
  if (category == 'all') return;
  bots.inrl({ pattern: [`${category}-menu`], sucReact: "üì∞", category: ["all", "system"] }, async (message, client) => {
  try {
    let prefix = new String; 
    if (!message.client.prefix || !message.client.prefix.length == 1) prefix = '.';
    let CMD_HELP =  ` ‚ï≠‚ïê‚ïê‚ïê„Äò ${Config.BOT_INFO.split(",")[0]} „Äô‚ïê‚ïê‚ïê‚ä∑‚ùç
 ‚îÉ
 ‚îÉ  ‚ï≠‚ïê‚ïê‚ïê‚ïê„Äò about „Äô‚ïê‚ïê‚ïê‚ïê‚ä∑‚ùç
 ‚îÉ  ‚îÇ
 ‚îÉ  ‚îÇ  Owner : ${Config.BOT_INFO.split(",")[1]}
 ‚îÉ  ‚îÇ  User : ${message.client.pushName}
 ‚îÉ  ‚îÇ  webSite : ${Config.WEB}
 ‚îÉ  ‚îÇ  Server : ${Config.HEROKU.APP_NAME}
 ‚îÉ  ‚îÇ  Disk Space: 620 GB
 ‚îÉ  ‚îÇ  Version: ${Config.VERSION}
 ‚îÉ  ‚îÇ
 ‚îÉ  ‚îÇ    ${Config.BOT_INFO.split(",")[0]}
 ‚îÉ  ‚îÇ
 ‚îÉ  ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 ‚îÉ  ‚ï≠‚ïê‚ïê‚ïê‚ïê„Äò all-cmds „Äô‚ïê‚ïê‚ïê‚ä∑‚ùç\n`;
    bots.commands.map((command) => {
      if (command.dontAddCommandList || command.pattern === undefined || command.pattern === null) return;
      if (command.category.includes(category)) { command.pattern.map((cmd) => CMD_HELP +=  " ‚îÉ  ‚îÇ      "+cmd+"\n")}
    }); 
   CMD_HELP += ` ‚îÉ  ‚ï∞‚îÄ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ä∑‚ùç
 ‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ä∑‚ùç`;
    await client.sendMessage( message.from,{ image: { url: Config.BOT_INFO.split(",")[2]  }, caption: CMD_HELP, }, { quoted: message });
    global.catchError = false;
  } catch (error) { global.catchError = true; return await client.sendErrorMessage( message.from, error, message.key, message);}
  });
})


bots.inrl({ pattern: [`cmds-count`], sucReact: "üÜó", category: ["all", "system"] }, async (message, client) => {
  try {
    await client.sendMessage( message.from, { text: bots.infoMessage('Counting commands üíØ') }, { quoted: bots.config.quoted.product });
    let all_cmd = 0;
    let visible_cmd = 0;
    let invisible_cmd = 0;
    let search_cmd = 0;
    let downloade_cmd = 0;
    let chat_cmd = 0;
    let system_cmd = 0;
    let fun_cmd = 0;
    let eighteenplus_cmd = 0;
    let owner_cmd = 0;
    let create_cmd = 0;
    let group_cmd = 0;
    let logo_cmd = 0;
    let countcmdOfCmd = 0;
    bots.commands.map(command => {
      if (command.category.includes("all")) all_cmd += command.pattern.length;
      if (!command.dontAddCommandList) visible_cmd += command.pattern.length;
      if (command.dontAddCommandList) invisible_cmd += command.pattern.length;
      if (command.category.includes("search")) search_cmd += command.pattern.length;
      if (command.category.includes("downloade")) downloade_cmd += command.pattern.length;
      if (command.category.includes("chat")) chat_cmd += command.pattern.length;
      if (command.category.includes("system")) system_cmd += command.pattern.length;
      if (command.category.includes("fun")) fun_cmd += command.pattern.length;
      if (command.category.includes("18+")) eighteenplus_cmd += command.pattern.length;
      if (command.category.includes("owner")) owner_cmd += command.pattern.length; 
      if (command.category.includes("create")) create_cmd += command.pattern.length; 
      if (command.category.includes("group")) group_cmd += command.pattern.length; 
      if (command.category.includes("logo")) logo_cmd += command.pattern.length; 
      countcmdOfCmd += command.pattern.length;
    });
    let text = `------- Command Count -------

ñ†å All Commands: ${all_cmd.toString()}
ñ†å Visible Commands: ${visible_cmd.toString()}
ñ†å Invisible Commands: ${invisible_cmd.toString()}
ñ†å Search Commands: ${system_cmd.toString()}
ñ†å Downloade Commands: ${downloade_cmd.toString()}
ñ†å Chat Commands: ${chat_cmd.toString()}
ñ†å System Commands: ${system_cmd.toString()}
ñ†å Fun Commands: ${fun_cmd.toString()}
ñ†å Adult Commands: ${eighteenplus_cmd.toString()}
ñ†å Owner Commands: ${owner_cmd.toString()}
ñ†å Create Commands: ${create_cmd.toString()}
ñ†å Group Commands: ${group_cmd.toString()}
ñ†å Logo Commands: ${logo_cmd.toString()}

üí¢ Count Of All Commands: ${countcmdOfCmd.toString()}
`;
    const buttons = [
      { buttonId: ".extra_urls", buttonText: { displayText: "urls" }, type: 1, },
      { buttonId: ".system-menu", buttonText: { displayText: "system menu" }, type: 1, },
    ];
    const Message = {
      image: { url: bots.config.image.url.D_E_DP_ },
      caption: text,
      footer: bots.config.exif.footer,
      buttons,
    };
    await client.sendMessage( message.from, Message, { quoted: message })
    global.catchError = false;
  } catch (error) { 
    global.catchError = true; 
    let countcmdOfCmd = 0;
    bots.commands.map((command) => { countcmdOfCmd += command.pattern.length });
    await client.sendMessage(message.from, {text: countcmdOfCmd.toString()}, { quoted: message });
    return await client.sendErrorMessage( message.from, error, message.key, message);
  }
});
const vcard = 'BEGIN:VCARD\n' // metadata of the contact card
            + 'VERSION:3.0\n' 
            + 'FN:'+Config.PACKNAME+'\n' // full name
            + 'ORG:'+Config.FOOTER+';\n' // the organization of the contact
            + 'TEL;type=CELL;type=VOICE;waid='+Config.SUDO+':'+Config.SUDO+'\n' // WhatsApp ID + phone number
            + 'END:VCARD'
 inrl({pattern: ['owner'], desc: "to check whether", sucReact: "ü•∫", category: ['all']},   async (message, client) => {
 await client.sendMessage( message.from, { contacts:{ displayName:`${Config.BOT_INFO.split(",")[0]}`, contacts: [{ vcard }],}})
});
const GDM = "it sends good morning message";
const GDN = "it sends Night message";

inrl(
  { pattern: ["gm","GoodMornig","gdmornig"], desc: GDM, sucReact: "üíñ", category: ["chat"] },
  async (message, client) => {
    var r_text = new Array();
    r_text[0] = "‚ùÄüçÉGood‚ùÄ ‚ùÄmorning‚ùÄü•∞‚ùÄ ";
    r_text[1] = "‚òòÔ∏èùê∫ùëúùëúùëë üåÖùëöùëúùëüùëõùëñùëõùëî üíê ";
    r_text[2] = "üçÉùô∂ùöòùöòùöç üåªùöñùöòùöõùöóùöíùöóùöê ü•∞ ";
    r_text[3] = "üçÄùóöùóºùóºùó± üòòùó∫ùóºùóøùóªùó∂ùóªùó¥ üå∏ ";
    r_text[4] = "üåªùìñùì∏ùì∏ùì≠ ùì∂ùì∏ùìªùì∑ùì≤ùì∑ùì∞ üíû ";
    r_text[5] = "üåºüÖñüÖûüÖûüÖì üÖúüÖûüÖ°üÖùüÖòüÖùüÖñ üê∂ ";
    r_text[6] = "üçÉ‚íº‚ìû‚ìû‚ìì üåà‚ìú‚ìû‚ì°‚ìù‚ìò‚ìù‚ìñ ü•∞ ";
    const i = Math.floor(7 * Math.random());
let returNtxt = await r_text[i] 
    await client.sendMessage( message.from, { text: returNtxt + message.client.pushName }, { quoted: message } );
    global.catchError = false;
  }
);

inrl(
  { pattern: ["ge", "good evening", "evening"], desc: "good evening", sucReact: "üíñ", category: ["chat"] },
  async (message, client) => {
    var r_text = new Array();
r_text[0] = "üòª…¢·¥è·¥è·¥Ö üíó·¥á·¥†·¥á…¥…™…¥…¢",
r_text[1] = "‚ù£Ô∏èùê∫ùõ©ùõ©ùê∑ üíìùõØùõªùõØùõÆùõ™ùõÆùê∫",
r_text[2] = "ü•∞ÔΩáÔΩèÔΩèÔΩÑ üíûÔΩÖÔΩñÔΩÖÔΩéÔΩâÔΩéÔΩá",
r_text[3] = "ü•≥ùì∞ùì∏ùì∏ùì≠ üíùùìÆùìøùìÆùì∑ùì≤ùì∑ùì∞",
r_text[4] = "üòç„É†„ÅÆ„ÅÆ„Çä üíò‰πá‚àö‰πáÂàÄÔæâÂàÄ„É†",
r_text[5] = "ü§©·é∂·éß·éß·é¥ üíï·èã·èâ·èã·èÅ·é•·èÅ·é∂",
r_text[6] = "üòõ …†∆°∆°…ñ üíî…õ€∑…õ≈ãƒ±≈ã…†"
const i = Math.floor(7 * Math.random());
let returNtxt = await r_text[i] 
    await client.sendMessage( message.from, { text: returNtxt + message.client.pushName }, { quoted: message } );
    global.catchError = false;
  }
);

inrl(
  { pattern: ["gn", "gdnight", "goodnight","gd8","gdn8"], desc: GDN, sucReact: "üíñ", category: ["chat"] },
  async (message, client) => {
    var r_text = new Array();
    r_text[0] = "üòòùôÇùô§ùô§ùôô üôàùô£ùôûùôúùôùùô© üí´‚ú®";
    r_text[1] = "ü§óùìñùì∏ùì∏ùì≠ üßö‚Äç‚ôÄùì∑ùì≤ùì∞ùì±ùìΩ ‚ùÑÔ∏è‚ú®";
    r_text[1] = "üåå‚ù°·ü†·ü†·ñ± üåô‚©é…®‚ù°œ¶∆¨ üåé";
    r_text[3] = "üòò÷Å÷Ö÷Ö’™ ‚≠êÔ∏è’≤√≠÷Å’∞‘µ üíù";
    r_text[4] = "üåÉ·èÄ·ù™·ù™·óû üôà·ëé·èÜ·èÄ·ïº·é¢ üí´‚ú®";
    const i = Math.floor(5 * Math.random());
let returNtxt = await r_text[i] 
    await client.sendMessage( message.from, { text: returNtxt + message.client.pushName }, { quoted: message, adReply: true } );
    global.catchError = false;
  }
);
inrl(
  { pattern: ["ga", "gdafternoon", "goodafternoon","gda",], desc: GDN, sucReact: "üíñ", category: ["chat"] },
  async (message, client) => {
    var r_text = new Array();
    r_text[0] = "üòò·é∂„Ññ„Ññ·ó™ ü•µÂçÇÂçÉ„Ñí‰πáÂ∞∫Âá†„Ññ„ÑñÂá†üí´‚ú®";
    r_text[1] = "ü§óùôÇùô§ùô§ùôô üíñùôñùôõùô©ùôöùôßùô£ùô§ùô§ùô£‚ùÑÔ∏è‚ú®";
    r_text[1] = "‚ô¢‚ôû  ùêÜ‚ìÑùê®‡πî ùêÄ∆í—Çùî¢ùìá≈áÔΩèùêé‡∏†  üí≤üéÄ";
    r_text[3] = "üòò…¢·¥è·¥è·¥Ö ‚≠êÔ∏è·¥ÄÍú∞·¥õ·¥á Ä…¥·¥è·¥è…¥ üíù";
    r_text[4] = "üåÉ‚Ç≤√ò√òƒê  üôà‚Ç≥‚Ç£‚ÇÆ…Ü‚±§‚Ç¶√ò√ò‚Ç¶üí´‚ú®";
    const i = Math.floor(5 * Math.random());
let returNtxt = await r_text[i] 
    await client.sendMessage( message.from, { text: returNtxt + message.client.pushName }, { quoted: message, adReply: true } );
    global.catchError = false;
  }
);
inrl(
	   {
		pattern: ['fancy'],
		desc: 'To convert text to random style as you want',
                sucReact: "üôÄ",
                category: ["system", "all"],
	   },
	async (message, client, match) => {
     const text = message.client.text;
if(!text){
let NewText =`
Enter A Text Quary
_ex_ : Enter a text like this *fancy 55,hi*
1 F·¥Ä…¥·¥Ñ è
2  é…îu…ê‚Ñ≤
3 F‚É£ a‚É£ n‚É£  c‚É£ y‚É£
4 fancy
5  è…î·¥é…íÍüª
6 FÃ∏ÕùÃãÃèÃæÕóÕÑÃ•ÃßÃ†ÕîÃØÃªÃ±aÃµÃêÃüÃ†ÃØnÃ∑ÕÇÃäÕãÃäÕÑÃêÕëÃãÃèÃ§Ã™ÕìÃ°ÕñÃπÃØÃôcÃ¥ÃíÕÜÃÅÃØyÃ∂ÕÜÃéÃëÕóÕùÕñÃòÃπÃ¶
7 ‚íª‚ìê‚ìù‚ìí‚ì®
8 FÃ∂aÃ∂nÃ∂cÃ∂yÃ∂
9 FÃ¥aÃ¥nÃ¥cÃ¥yÃ¥
10 FÃ∑aÃ∑nÃ∑cÃ∑yÃ∑
11 FÃ≤aÃ≤nÃ≤cÃ≤yÃ≤
12 FÃ≥aÃ≥nÃ≥cÃ≥yÃ≥
13 F‚ô•a‚ô•n‚ô•c‚ô•y
14 FÕéaÕénÕécÕéyÕé
15 FÃΩÕìaÃΩÕìnÃΩÕìcÃΩÕìyÃΩÕì
16 ‚òûÔ∏é‚ôãÔ∏é‚ñ†Ô∏é‚ôçÔ∏é‚çìÔ∏é
17 FÔΩÅncÔΩô
18 “íŒîŒ†CŒ®
19 ÂçÉÂçÇÂá†Âåö„Ñö
20 ÍéáÍçèÍà§Íè≥Íå©
21 ·âª·àç·ä≠·à≠·àÉ
22 ùêÖùêöùêßùêúùê≤
23 ùë≠ùíÇùíèùíÑùíö
24 ùêπùëéùëõùëêùë¶
25 ·†ªÍ™ñÍ™Ä·•¥Í™ó
26 ùôµùöäùöóùöåùö¢
27 f‡∏Ñ‡∫ñ¬¢‡∏Ø
28  ÑƒÖ≈ã∆à·Éß
29 ÔΩ∑ÔæëÂàÄ·ÑÉÔæò
30 ÂçÉÂçÇÂá†Âåö„Ñö
31 üÑµüÑ∞üÑΩüÑ≤üÖà
32 ·é¶·èó·èÅ·çà·é©
33 ·ñ¥·ó©·ëé·ëïY
34  Ñ«ü’º∆à è
35 ùôµùöäùöóùöåùö¢
36 ùôÅùôñùô£ùôòùôÆ
37 ùóôùóÆùóªùó∞ùòÜ
38 ùêÖùêöùêßùêúùê≤
39 ùòçùò¢ùòØùò§ùò∫
40 FŒ±…≥∆à·Éß
41 ‚Ç£‚Ç≥‚Ç¶‚Çµ…é
42 ¬£√•√±¬¢¬•
43 ∆íŒ±Œ∑¬¢—É
44 FŒõ–ü·ÑÉY
45 ∆ëƒÖ’≤√ß’æ
46 F‚Çê‚Çôcy
47 ·∂†·µÉ‚Åø·∂ú ∏
48 ≈¶‡∏Ñ‡∏†œÇ◊•
49 ùîΩùïíùïüùïîùï™
50 ùï±ùñÜùñìùñàùñû
51 üÖµüÖ∞üÖΩüÖ≤üÜà
52 ùìïùì™ùì∑ùì¨ùîÇ
53 ùîâùîûùî´ùî†ùî∂
54 Ôº¶ÔΩÅÔΩéÔΩÉÔΩô
55 ùë≠ùíÇùíèùíÑùíö
56 ùêπùõ•ùõÆùê∂ùëå
57 ùôÅùûìùûúùòæùôî
58 ùêÖùö´ùö¥ùêÇùêò
59 ·ñ¥·ó©·ëé·ëï·é©
_ex_ : Enter a text like this *fancy 55,hi*`
return await client.sendMessage(message.from, { text : NewText });
    }
         var split = text.split(',');
         Num = split[0] || match || "55";
         Text = message.quoted.text || split[1] || "enter A text with number ex 31,text";
let ThenText = await styletext(Text, Num)
return await client.sendMessage(message.from, { text : ThenText });
    }
);
